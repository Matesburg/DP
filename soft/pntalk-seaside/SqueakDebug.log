Error: only integers should be used as indices4 May 2013 12:09:21 amVM: Win32 - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir E:\VUT\DP\soft\pntalk-seasideTrusted Dir E:\VUT\DP\soft\pntalk-seaside\MatronUntrusted Dir C:\Users\Matron\Documents\My SqueakUndefinedObject(Object)>>error:	Receiver: nil	Arguments and temporary variables: 		aString: 	'only integers should be used as indices'	Receiver's instance variables: nilUndefinedObject(Object)>>errorNonIntegerIndex	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilUndefinedObject(Object)>>at:	Receiver: nil	Arguments and temporary variables: 		index: 	'Conference'	Receiver's instance variables: nilWAConference>>initialize	Receiver: a WAConference	Arguments and temporary variables: 		cls: 	nil	Receiver's instance variables: 		decoration: 	nil		conf: 	nil		active: 	nil		waAuthors: 	nil		method: 	nil--- The full stack ---UndefinedObject(Object)>>error:UndefinedObject(Object)>>errorNonIntegerIndexUndefinedObject(Object)>>at:WAConference>>initialize - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -WAConference class(WAPresenter class)>>newWARenderLoopMain>>createRootWARenderLoopMain>>start:WASession>>start:[] in WASession>>performRequest: {[^ self start: aRequest]}Dictionary>>at:ifAbsent:WASession>>performRequest:[] in WASession>>responseForRequest: {[self performRequest: aRequest]}BlockContext>>on:do:[] in WASession>>withErrorHandler: {[aBlock   on: Error   do: [:e |     self errorHandler handleError: e.    WAP...]}BlockContext>>on:do:WASession>>withErrorHandler:[] in WASession>>responseForRequest: {[self   withErrorHandler: [self performRequest: aRequest]]}BlockContext>>on:do:WACurrentSession class(WADynamicVariable class)>>use:during:[] in WASession>>responseForRequest: {[WACurrentSession   use: self   during: [self     withErrorHandler: [self pe...]}[] in WASession>>withEscapeContinuation: {[:cc |  escapeContinuation := cc.  aBlock value.  self pageIntentionallyLeft...]}EscapeContinuation class(Continuation class)>>currentDo:WASession>>withEscapeContinuation:WASession>>responseForRequest:[] in WASession>>incomingRequest: {[self responseForRequest: aRequest]}BlockContext>>on:do:[] in WAProcessMonitor>>critical:ifError: {[value := aBlock on: Error do: anErrorBlock]}BlockContext>>ensure:[] in WAProcessMonitor>>critical:ifError: {[[value := aBlock on: Error do: anErrorBlock]   ensure: [semaphore signal]]}[] in BlockContext>>newProcess {[self value.  Processor terminateActive]}