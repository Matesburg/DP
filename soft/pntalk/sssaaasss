(MyRepository new instVarNamed: 'name' put: 'ConferenceSystemDP';addComponents: {'testGetConf' -> (PNCompiledClass compileClass: 'class testGetConf is_a PNobject	place start(1`#e)	place system()	place state()	trans t		precond start(1`#e)		action {			sys := SystemNet new . sys initMe .  }		postcond state(1`#get), system(1`sys)	trans get		precond state(1`#get), system(1`s)		guard { s conferences: c .  }		action {			Transcript show: ''ble'' . c print .  }').#Member -> (PNCompiledClass compileClass: 'class Member is_a PNobject	place name(1`#nil)	place role(1`#nil)	place papers()	place papersCount(1`0)	place papersTmp()	place papersLock(1`#free)	place email(1`#nil)	place address(1`#nil)	sync hasPaper: p 		cond papers(1`p)	sync role: r 		cond role(1`r)	sync name: n 		cond name(1`n)	inhibitor isPapersTmp: obj 		cond papersTmp(1`obj)	sync papersCount: c 		cond papersCount(1`c)	sync email: e 		cond email(1`e)	inhibitor hasNotPaper: p 		cond papers(1`p)	inhibitor noPapers		cond papers(1`p)	sync isAuthor		cond role(1`#author)	sync isReviewer		cond role(1`#reviewer)	sync isAdmin		cond role(1`#admin)	sync address: a 		cond address(1`a)	inhibitor papersEmpty		cond papers(1`obj)method setName: value 	place value()	place return()	trans t		precond value(1`newValue), name(1`oldValue)		postcond name(1`newValue), return(1`newValue)method print	place start(1`#e)	place return()	trans t1		cond name(1`n), role(1`r)		precond start(1`#e)		action {			Transcript show: (n printString ) . Transcript show: '' ( '' . Transcript show: (r printString ) . Transcript show: '' ) '' . Transcript cr .  }		postcond return(1`#done)method as: aRole name: aName 	place aRole()	place aName()	place return()	trans t		precond aRole(1`r), aName(1`n), name(1`nOld), role(1`rOld)		postcond role(1`r), name(1`n), return(1`self)method addPaper: p 	place p()	place return()	trans t		precond p(1`p), papersCount(1`count), papersLock(1`lock)		guard { self hasNotPaper: p .  }		action {			newCount := count + 1 .  }		postcond papers(1`p), papersCount(1`newCount), papersLock(1`lock), return(1`p)	trans t1		precond p(1`p), papersLock(1`lock)		guard { self hasPaper: p .  }		action {			Transcript show: ''Paper not added.'' . Transcript cr .  }		postcond return(1`p), papersLock(1`lock)method printPapers	place start(1`#e)	place phase()	place count()	place return()	trans foreachStart		precond start(1`#e), papersLock(1`lock)		postcond phase(1`#read), count(1`0)	trans empty		precond phase(1`#read), count(1`0)		guard { self papersEmpty .  }		action {			Transcript show: ''Papers empty'' . Transcript cr .  }		postcond return(1`#nil)	trans read		cond papers(1`obj), phase(1`#read)		precond count(1`c)		guard { self isPapersTmp: obj .  }		action {			newCount := c + 1 . Transcript show: ''wrote:  '' . Transcript show: (newCount printString ) . Transcript show: ''- '' . obj print .  }		postcond papersTmp(1`obj), count(1`newCount)	trans readDone		cond count(1`myCount), papersCount(1`objCount)		precond phase(1`#read)		guard { myCount = objCount .  }		postcond phase(1`#done)	trans clearTmp		cond phase(1`#done)		precond papersTmp(1`obj), count(1`count)		guard { count > 0 .  }		action {			newCount := count - 1 .  }		postcond count(1`newCount)	trans foreachFinish		precond phase(1`#done), count(1`0)		postcond return(1`#done), papersLock(1`#free)method setRole: value 	place value()	place return()	trans t		precond value(1`newValue), role(1`oldValue)		postcond role(1`newValue), return(1`newValue)method setEmail: value 	place value()	place return()	trans t		precond value(1`newValue), email(1`oldValue)		postcond email(1`newValue), return(1`newValue)').#testSys -> (PNCompiledClass compileClass: 'class testSys is_a PNobject	place start(1`#e)	place state()	place conf()	place ks()	trans t		precond start(1`#e)		action {			sys := SystemNet new . conf := Conference new . m := Member new . m as: #author name: ''Matej'' . sys addConference: conf . sys addUser: m . Transcript show: ''System test'' . Transcript cr .  }		postcond state(1`#login), ks(1`sys), conf(1`conf)	trans log		cond ks(1`sys)		precond state(1`#login)		guard { sys register: ''Pepa'' as: #admin .  }		action {			Transcript show: ''login good'' . Transcript cr .  }		postcond state(1`#testCreateConf)	trans testCreateConf		cond ks(1`sys), conf(1`c)		precond state(1`#testCreateConf)		guard { sys loggedUserNet: net .  }		action {			uNet := sys getLoggedUserNet . Transcript show: ''create conf'' . Transcript cr . uNet setConference: c . uNet createConf: ''NewConf'' .  }		postcond state(1`#end)	trans testAddPaper		cond ks(1`sys), conf(1`c)		precond state(1`#testAddPaper)		guard { sys loggedUserNet: net .  }		action {			Transcript show: ''add paper'' . net setConference: c . p := Paper new . net addPaper: p . Transcript show: '' done'' . Transcript cr .  }		postcond state(1`#end)').#Paper -> (PNCompiledClass compileClass: 'class Paper is_a PNobject	place authors()	place authorsCount(1`0)	place authorsTmp()	place authorsLock(1`#free)	place review()	place name(1`#nil)	place text(1`#nil)	place state(1`#created)	sync review: r 		cond review(1`r)	sync hasAuthor: a 		cond authors(1`a)	inhibitor reviewEmpty		cond review(1`r)	inhibitor authorsEmpty		cond authors(1`obj)	sync state: s 		cond state(1`s)	inhibitor hasNotAuthor: a 		cond authors(1`a)	sync text: t 		cond text(1`t)	inhibitor isAuthorsTmp: obj 		cond authorsTmp(1`obj)	inhibitor isEmpty		cond text(1`s)	sync authorsCount: c 		cond authorsCount(1`c)method setName: newName 	place newName()	place return()	trans t		precond newName(1`n), name(1`nOld)		postcond name(1`n), return(1`n)method print	place start(1`#e)	place return()	trans t		cond name(1`n), text(1`t)		precond start(1`#e)		action {			Transcript show: (n printString ) . Transcript show: '': '' . Transcript show: (t printString ) . Transcript cr .  }		postcond return(1`#done)method printAuthors	place start(1`#e)	place phase()	place count()	place return()	trans foreachStart		precond start(1`#e), authorsLock(1`lock)		postcond phase(1`#read), count(1`0)	trans empty		precond phase(1`#read), count(1`0)		guard { self authorsEmpty .  }		action {			Transcript show: ''Authors empty'' . Transcript cr .  }		postcond return(1`#nil)	trans read		cond authors(1`obj), phase(1`#read)		precond count(1`c)		guard { self isAuthorsTmp: obj .  }		action {			newCount := c + 1 . Transcript show: ''by:  '' . Transcript show: (newCount printString ) . Transcript show: ''- '' . obj print .  }		postcond authorsTmp(1`obj), count(1`newCount)	trans readDone		cond count(1`myCount), authorsCount(1`objCount)		precond phase(1`#read)		guard { myCount = objCount .  }		postcond phase(1`#done)	trans clearTmp		cond phase(1`#done)		precond authorsTmp(1`obj), count(1`count)		guard { count > 0 .  }		action {			newCount := count - 1 .  }		postcond count(1`newCount)	trans foreachFinish		precond phase(1`#done), count(1`0)		postcond return(1`#done), authorsLock(1`#free)method printReview	place start(1`#e)	place return()	trans t		precond start(1`#e)		guard { self reviewEmpty .  }		action {			Transcript show: ''No review'' . Transcript cr .  }		postcond return(1`#done)	trans t1		cond review(1`r)		precond start(1`#e)		action {			Transcript show: ''Review:  '' . r print .  }		postcond return(1`#done)method setText: newText 	place newText()	place return()	trans t		precond newText(1`t), text(1`tOld)		postcond text(1`t), return(1`t)method addAuthor: a 	place a()	place state(1`#test)	place return()	trans t		precond a(1`a), authorsCount(1`count), state(1`#test)		guard { self hasNotAuthor: a .  }		action {			newCount := count + 1 .  }		postcond authors(1`a), authorsCount(1`newCount), state(1`(#add, a))	trans t2		precond state(1`(#add, a))		action {			a addPaper: self .  }		postcond return(1`a)	trans t1		precond a(1`a), state(1`#test)		guard { self hasAuthor: a .  }		action {			Transcript show: ''Author not added.'' . Transcript cr .  }		postcond return(1`a)method removeAuthor: a 	place a()	place return()	trans t		precond a(1`a), authors(1`a)		postcond return(1`a)	trans notAuthor		precond a(1`a)		guard { self hasNotAuthor: a .  }		postcond return(1`#notAuthor)	trans empty		precond a(1`a)		guard { self authorsEmpty .  }		postcond return(1`#empty)method setReview: r 	place r()	place return()	trans t		precond r(1`r), review(1`old)		postcond review(1`r), return(1`r)	trans empty		precond r(1`r)		guard { self reviewEmpty .  }		postcond review(1`r), return(1`r)').#Location -> (PNCompiledClass compileClass: 'class Location is_a PNobject	place name(1`#nil)	place capacity(1`#nil)	place address(1`#nil)	sync name: n 		cond name(1`n)	sync capacity: c 		cond capacity(1`c)	sync address: a 		cond address(1`a)method setName: newName 	place newName()	place return()	trans t		precond newName(1`n), name(1`nOld)		postcond name(1`n), return(1`n)method print	place start(1`#e)	place return()	trans t1		cond name(1`n), capacity(1`c)		precond start(1`#e)		action {			Transcript show: (n printString ) . Transcript show: '' ( '' . Transcript show: (c printString ) . Transcript show: '' ) '' . Transcript cr .  }		postcond return(1`#done)method setCapacity: newCapacity 	place newCapacity()	place return()	trans t		precond newCapacity(1`c), capacity(1`cOld)		postcond capacity(1`c), return(1`c)').'testConf' -> (PNCompiledClass compileClass: 'class testConf is_a PNobject	place start(1`#e)	place end()	trans t		precond start(1`#e)		action {			conf := Conference new . conf setName: ''Test conf1'' . conf setDescription: ''Conference for testing model'' . aMember3 := Member new . aMember3 as: #author name: ''Pepa Author'' . aMember1 := Member new . aMember1 as: #author name: ''Petr Author'' . aMember2 := Member new . aMember2 as: #author name: ''Pavel Author'' . rMember := Member new . rMember as: #reviewer name: ''Franta Reviewer'' . conf addMember: aMember1 . conf addMember: rMember . paper1 := Paper new . paper1 setName: ''Art1'' . paper1 setText: ''Test art1.'' . paper1 addAuthor: aMember1 . paper2 := Paper new . paper2 setName: ''Art2'' . paper2 setText: ''Test art2.'' . paper2 addAuthor: aMember2 . paper2 addAuthor: aMember3 . conf addPaper: paper1 . conf addPaper: paper2 . conf print . conf setState: #review . rev1 := Review new . rev1 setAuthor: rMember . rev1 setText: ''Clanek obsahuje mnoho chyb.'' . rev2 := Review new . rev2 setAuthor: rMember . rev2 setText: ''Clanek je v poradku.'' . paper1 setReview: rev1 . paper2 setReview: rev2 . conf print . conf setState: #close .  }		postcond end(1`#e)').#SystemNet -> (PNCompiledClass compileClass: 'class SystemNet is_a PNobject	place conferences()	place ready(1`#e)	place name()	place users()	place user()	place loggedUserNets()	trans registerNew		precond name(1`(name, type))		action {			us := self newVerify: name as: type .  }		postcond user(1`us), ready(1`#e)	trans getNet		precond user(1`u)		action {			net := self verify: u .  }	inhibitor notUserNamed: n 		cond users(1`u)		guard { u name: n .  }	sync conferences: c 		cond conferences(1`c)	sync user: u named: n 		cond users(1`u)		guard { u name: n .  }	sync isReady		cond ready(1`#e)	sync logout: net 		precond loggedUserNets(1`net)	sync users: u 		cond users(1`u)	inhibitor notReady		cond ready(1`#e)	sync conferences: c state: s 		cond conferences(1`c)		guard { c state: s .  }	sync register: name as: type 		precond ready(1`#e)		postcond name(1`(name, type))	sync openConf: c 		cond conferences(1`c)		guard { c state: #open .  }	sync login: name user: u 		cond ready(1`#e)		guard { self user: u named: name .  }method removeUser: entity 	place entity()	place return()	trans t		precond entity(1`entity), users(1`entity)		postcond return(1`#done)method addConference: aName desc: aDesc 	place aName()	place aDesc()	place return()	trans t		precond aName(1`n), aDesc(1`d)		action {			Transcript show: ''System: new conf'' . Transcript cr . conf := Conference new . conf setName: n . conf setDesc: d .  }		postcond conferences(1`conf), return(1`conf)method initMe	place start(1`#e)	place return()	trans t		precond start(1`#e)		action {			Transcript show: ''Init system - '' . m := Member new . m as: #author name: ''a'' . self addUser: m . ad := Member new . ad as: #admin name: ''admin'' . self addUser: ad . rev := Member new . rev as: #reviewer name: ''rev'' . self addUser: rev . c1 := Conference new . c1 setName: ''Open Conf'' . c1 setState: #open . c2 := Conference new . c2 setName: ''Closed Conf'' . c2 setState: #closed . c3 := Conference new . c3 setName: ''Finished Conf'' . c3 setState: #finished . self addConference: c1 . self addConference: c2 . self addConference: c3 . Transcript show: ''done'' . Transcript cr .  }		postcond return(1`#done)method newVerify: name as: type 	place name()	place type()	place m()	place return()	trans t1		precond name(1`n)		guard { self user: m named: n .  }		action {			Transcript show: ''User exist'' . Transcript cr .  }		postcond return(1`#nil)	trans t2		precond name(1`n), type(1`t)		guard { self notUserNamed: n .  }		action {			m := Member new . m as: t name: n . Transcript show: ''User created'' . Transcript cr .  }		postcond m(1`(m, t)), users(1`m), return(1`m)method logout1: net 	place net()	place return()	trans t		precond net(1`n), loggedUserNets(1`n)		action {			Transcript show: ''System user logout'' . Transcript cr .  }		postcond return(1`#done)method addConference: c 	place c()	place return()	trans t		precond c(1`c)		postcond conferences(1`c), return(1`c)method verify: name for: type 	place name()	place type()	place types(1`(#author, #AuthorNet), 1`(#reviewer, #ReviewerNet), 1`(#admin, #AdminNet))	place member()	place return()	trans verifyMember		cond conference(1`conf)		precond name(1`name)		guard { conf member: m named: name .  }		postcond member(1`m)	trans verifyType		cond conference(1`conf)		precond member(1`m), type(1`type), types(1`(type, netClass))		guard { m type: type .  }		action {			net := ((self classNamed: netClass ) new ) for: m .  }		postcond return(1`net)method verify: name as: type 	place name()	place type()	place return()	trans verifyAuthor		cond conference(1`conf)		precond name(1`name), type(1`#author)		guard { conf author: a named: name .  }		action {			net := (AuthorNet new ) for: a .  }		postcond return(1`net)	trans verifyReviewer		cond conference(1`conf)		precond name(1`name), type(1`#reviewer)		guard { conf reviewer: a named: name .  }		action {			net := (ReviewerNet new ) for: a .  }		postcond return(1`net)	trans verifyAdmin		cond conference(1`conf)		precond name(1`name), type(1`#admin)		guard { conf admin: a named: name .  }		action {			net := (AdminNet new ) for: a .  }		postcond return(1`net)	trans notMember		cond conference(1`conf)		precond name(1`name)		guard { conf notMemberNamed: name .  }		postcond return(1`#nil)method newConference	place start(1`#e)	place return()	trans create		precond start(1`#e)		action {			Transcript show: ''System new Conf'' . Transcript cr . obj := Conference new .  }		postcond return(1`obj)method verify: u 	place u()	place user()	place return()	trans ifAnonym		precond u(1`u)		guard { u = #anonym .  }		action {			net := UserNet new . anonym := Member new . anonym as: #anonym name: ''Anonym'' . net for: anonym . net setSystem: self .  }		postcond return(1`net)	trans ifUser		precond u(1`u)		guard { u ~= #anonym .  }		postcond user(1`u)	trans verifyAuthor		precond user(1`u)		guard { u isAuthor .  }		action {			net := AuthorNet new . net for: u . net setSystem: self .  }		postcond loggedUserNets(1`net), return(1`net)	trans verifyAdmin		precond user(1`u)		guard { u isAdmin .  }		action {			net := AdminNet new . net for: u . net setSystem: self .  }		postcond loggedUserNets(1`net), return(1`net)	trans verifyReviewer		precond user(1`u)		guard { u isReviewer .  }		action {			net := ReviewerNet new . net for: u . net setSystem: self .  }		postcond loggedUserNets(1`net), return(1`net)method addUser: u 	place u()	place return()	trans t		precond u(1`u)		postcond users(1`u), return(1`u)method newUser	place start(1`#e)	place return()	trans create		precond start(1`#e)		action {			Transcript show: ''System new User'' . Transcript cr . obj := Member new .  }		postcond return(1`obj)method removeConf: entity 	place entity()	place return()	trans t		precond entity(1`entity), conferences(1`entity)		postcond return(1`#done)').'UserNet' -> (PNCompiledClass compileClass: 'class UserNet is_a PNobject	place system()	place member()	place conference()	place start(1`#e)	trans test		precond start(1`#e)		action {			Transcript show: ''Admin net'' . Transcript cr .  }	sync system: s 		cond system(1`s)	sync isAdmin		cond member(1`m)		guard { m isAdmin .  }	sync conferences: c 		cond system(1`s)		guard { s conferences: c . c notState: #created . c notState: #open . c notState: #closed .  }	sync member: m 		cond member(1`m)	sync memberName: n 		cond member(1`m)		guard { m name: n .  }	sync memberRole: r 		cond member(1`m)		guard { m role: r .  }method createConf: n 	place n()	place return()	trans t		cond system(1`s)		precond n(1`n)		action {			conf := Conference new . conf setName: n . s addConference: conf .  }		postcond return(1`conf)method for: m 	place m()	place return()	trans t		precond m(1`member)		action {			self setMember: member .  }		postcond return(1`#done)method setConference: c 	place c()	place return()	trans t		precond c(1`c)		postcond conference(1`c), return(1`c)method createConf: n desc: d 	place n()	place d()	place return()	trans t		cond system(1`s)		precond n(1`n), d(1`d)		action {			conf := Conference new . conf setName: n . conf setDescription: d . s addConference: conf .  }		postcond return(1`conf)method setMember: m 	place m()	place return()	trans t		precond m(1`m)		postcond member(1`m), return(1`m)method for: m in: c 	place m()	place c()	place return()	trans t		precond m(1`member), c(1`conf)		action {			self setMember: member . self setConference: conf .  }		postcond return(1`#done)method setSystem: s 	place s()	place return()	trans t		precond s(1`s)		postcond system(1`s), return(1`s)').'testAnonym' -> (PNCompiledClass compileClass: 'class testAnonym is_a PNobject	place start(1`#e)	place net()	place state()	trans t		precond start(1`#e)		action {			sys := SystemNet new . net := sys verifyOld: #anonym .  }		postcond state(1`#done), net(1`net)').'ReviewerNet' -> (PNCompiledClass compileClass: 'class ReviewerNet is_a PNobject	place conference()	place member()	place start(1`#e)	trans test		precond start(1`#e)		action {			Transcript show: ''Reviewer net'' . Transcript cr .  }	sync memberRole: r 		cond member(1`m)		guard { m role: r .  }	sync cannotPutReview		cond conference(1`c)		guard { c phase: #final .  }	sync member: m 		cond member(1`m)	sync canPutReview		cond conference(1`c)		guard { c phase: #review .  }	sync memberName: n 		cond member(1`m)		guard { m name: n .  }method for: m 	place m()	place return()	trans t		precond m(1`member)		action {			self setMember: member .  }		postcond return(1`#done)method setConference: c 	place c()	place return()	trans t		precond c(1`c)		postcond conference(1`c), return(1`c)method setMember: m 	place m()	place return()	trans t		precond m(1`m)		postcond member(1`m), return(1`m)method addReview: text to: paper 	place text()	place paper()	place return()	trans succes		cond member(1`m)		precond text(1`t), paper(1`p)		guard { self canPutReview .  }		action {			rev = (Review new ) . rev setAuthor: m . rev setText: text . p putReview: rev .  }		postcond return(1`true)	trans fail		cond conference(1`c), member(1`m)		precond r(1`p)		guard { self cannotPutReview .  }		postcond return(1`false)method for: m in: c 	place m()	place c()	place return()	trans t		precond m(1`member), c(1`conf)		action {			self setMember: member . self setConference: conf .  }		postcond return(1`#done)').'Conference' -> (PNCompiledClass compileClass: 'class Conference is_a PNobject	place name()	place description(1`#nil)	place datetime(1`#nil)	place location(1`#nil)	place papers()	place papersCount(1`0)	place papersTmp()	place papersLock(1`#free)	place members()	place membersCount(1`0)	place membersTmp()	place membersLock(1`#free)	place state(1`#open)	sync reviewer: r 		cond members(1`r)		guard { r isReviewer .  }	inhibitor papersEmpty		cond papers(1`obj)	inhibitor isMembersTmp: obj 		cond membersTmp(1`obj)	sync membersCount: c 		cond membersCount(1`c)	inhibitor notState: s 		cond state(1`s)	sync location: var 		cond location(1`var)	sync datetime: var 		cond datetime(1`var)	sync description: d 		cond description(1`d)	inhibitor membersEmpty		cond members(1`obj)	sync name: n 		cond name(1`n)	sync papersCount: c 		cond papersCount(1`c)	sync member: m named: n 		cond members(1`m)		guard { m name: n .  }	sync author: a 		cond members(1`a)		guard { a isAuthor .  }	inhibitor descNotEmpty		cond description(1`d)		guard { d == #nil .  }	sync state: s 		cond state(1`s)	inhibitor nameEmpty		cond name(1`n)	inhibitor notMemberNamed: n 		cond members(1`m)		guard { m name: n .  }	inhibitor isPapersTmp: obj 		cond papersTmp(1`obj)method addPaper: p 	place p()	place return()	trans t		precond p(1`p), papersCount(1`x)		action {			y := x + 1 .  }		postcond papers(1`p), papersCount(1`y), return(1`p)method setName: value 	place value()	place return()	trans empty		precond value(1`newValue)		guard { self nameEmpty .  }		postcond name(1`newValue), return(1`newValue)	trans notEmpty		precond value(1`newValue), name(1`oldValue)		postcond name(1`newValue), return(1`newValue)method printPapers	place start(1`#e)	place phase()	place count()	place return()	trans empty		precond phase(1`#read), count(1`0)		guard { self papersEmpty .  }		action {			Transcript show: ''Papers empty'' . Transcript cr .  }		postcond return(1`#nil)	trans read		cond papers(1`p), phase(1`#read)		precond count(1`c)		guard { self isPapersTmp: p .  }		action {			newCount := c + 1 . Transcript show: (newCount printString ) . Transcript show: ''- '' . p print . p printAuthors . p printReview .  }		postcond papersTmp(1`p), count(1`newCount)	trans readDone		cond count(1`myCount), papersCount(1`pCount)		precond phase(1`#read)		guard { myCount = pCount .  }		postcond phase(1`#done)	trans clearTmp		cond phase(1`#done)		precond papersTmp(1`p), count(1`count)		guard { count > 0 .  }		action {			newCount := count - 1 .  }		postcond count(1`newCount)	trans foreachFinish		precond phase(1`#done), count(1`0)		postcond return(1`#done), papersLock(1`#free)	trans foreachStart		precond start(1`#e), papersLock(1`lock)		postcond phase(1`#read), count(1`0)method setState: s 	place s()	place return()	trans t		precond s(1`s), state(1`x)		postcond state(1`s), return(1`s)method printMembers	place start(1`#e)	place phase()	place count()	place return()	trans foreachStart		precond start(1`#e), membersLock(1`lock)		postcond phase(1`#read), count(1`0)	trans empty		precond phase(1`#read), count(1`0)		guard { self membersEmpty .  }		action {			Transcript show: ''Members empty'' . Transcript cr .  }		postcond return(1`#nil)	trans read		cond members(1`obj), phase(1`#read)		precond count(1`c)		guard { self isMembersTmp: obj .  }		action {			newCount := c + 1 . Transcript show: (newCount printString ) . Transcript show: ''- '' . obj print .  }		postcond membersTmp(1`obj), count(1`newCount)	trans readDone		cond count(1`myCount), membersCount(1`objCount)		precond phase(1`#read)		guard { myCount = objCount .  }		postcond phase(1`#done)	trans clearTmp		cond phase(1`#done)		precond membersTmp(1`obj), count(1`count)		guard { count > 0 .  }		action {			newCount := count - 1 .  }		postcond count(1`newCount)	trans foreachFinish		precond phase(1`#done), count(1`0)		postcond return(1`#done), membersLock(1`#free)method print	place start(1`#e)	place return()	trans t		cond name(1`n), description(1`d), state(1`s)		precond start(1`#e)		guard { self name: na .  }		action {			Transcript cr . Transcript show: ''Conference print '' . Transcript cr . Transcript show: ''name: '' . Transcript show: (n printString ) . Transcript cr . Transcript show: ''desc: '' . Transcript show: (d printString ) . Transcript cr . Transcript show: ''state: '' . Transcript show: (s printString ) . Transcript cr . Transcript show: ''papers: '' . Transcript cr . self printPapers . Transcript cr . Transcript show: ''members: '' . Transcript cr . self printMembers . Transcript cr .  }		postcond return(1`#done)method setDescription: newDesc 	place newDesc()	place return()	trans t		precond newDesc(1`d), description(1`dOld)		postcond description(1`d), return(1`d)method addMember: m 	place m()	place return()	trans t		precond m(1`m), membersCount(1`count)		action {			newCount := count + 1 .  }		postcond members(1`m), membersCount(1`newCount), return(1`m)method setLocation: newLoc 	place newLoc()	place return()	trans t		precond newLoc(1`l), name(1`lOld)		postcond name(1`l), return(1`l)method setDatetime: value 	place value()	place return()	trans t		precond value(1`newValue), datetime(1`oldValue)		postcond datetime(1`newValue), return(1`newValue)method getName	place start(1`#e)	place return()	trans empty		precond start(1`#e)		guard { self nameEmpty .  }		postcond return(1`#nil)	trans notEmpty		cond name(1`var)		precond start(1`#e)		postcond return(1`var)').'testMember' -> (PNCompiledClass compileClass: 'class testMember is_a PNobject	place start(1`#e)	place end()	trans t		precond start(1`#e)		action {			Transcript show: ''Test member'' . Transcript cr . m := Member new . m as: #author name: ''Franta'' . p := Paper new . p setName: ''Art1'' . p setText: ''Blablabla'' . m addPaper: p . m addPaper: p . m print .  }').'gggg' -> (PNCompiledClass compileClass: 'class Rev1 is_a Reviewobject	place start(1`#e)	place state()').'Review' -> (PNCompiledClass compileClass: 'class Review is_a PNobject	place author(1`#nil)	place text(1`#nil)	sync emptyText		cond text(1`t)		guard { t == #nil .  }	sync author: a 		cond author(1`a)	sync text: t 		cond text(1`t)method setAuthor: a 	place a()	place return()	trans t		precond a(1`a), author(1`x)		postcond author(1`a), return(1`a)method print	place start(1`#e)	place return()	trans t		precond start(1`#e), text(1`t), author(1`a)		action {			Transcript show: (t printString ) . Transcript show: '' (by '' . a print . Transcript show: '' ) '' . Transcript cr .  }		postcond return(1`#done)method setText: newText 	place newText()	place return()	trans t		precond newText(1`t), text(1`x)		postcond text(1`t), return(1`t)').'AuthorNet' -> (PNCompiledClass compileClass: 'class AuthorNet is_a PNobject	place member()	place conference()	place start(1`#e)	trans test		precond start(1`#e)		action {			Transcript show: ''Author net'' . Transcript cr .  }	sync review: r 		cond member(1`m)		guard { m review: r .  }	sync cannotPutReview		cond conference(1`c)		guard { c state: #final .  }	sync canPutPaper		cond conference(1`c)		guard { c state: #open .  }	sync member: m 		cond member(1`m)	sync memberName: n 		cond member(1`m)		guard { m name: n .  }	sync memberRole: r 		cond member(1`m)		guard { m role: r .  }	sync paper: p 		cond member(1`m)		guard { m paper: p .  }	sync cannotPutPaper		cond conference(1`c)		guard { c state: #final .  }	sync canPutReview		cond conference(1`c)		guard { c state: #review .  }method addPaper: p 	place p()	place return()	trans t1		cond member(1`m), conference(1`c)		precond p(1`p)		guard { self canPutPaper .  }		action {			p addAuthor: m . c addPaper: p . c addMember: m .  }		postcond return(1`#true)	trans t2		cond conference(1`c), member(1`m)		precond p(1`p)		guard { self cannotPutPaper .  }		postcond return(1`#false)method for: m 	place m()	place return()	trans t		precond m(1`member)		action {			self setMember: member .  }		postcond return(1`#done)method setConference: c 	place c()	place return()	trans t		precond c(1`c)		postcond conference(1`c), return(1`c)method setMember: m 	place m()	place return()	trans t		precond m(1`m)		postcond member(1`m), return(1`m)method for: m in: c 	place m()	place c()	place return()	trans t		precond m(1`member), c(1`conf)		action {			self setMember: member . self setConference: conf .  }		postcond return(1`#done)method addPaper: n text: t 	place n()	place t()	place return()	trans t1		cond member(1`m)		precond n(1`n), t(1`t)		guard { self canPutPaper .  }		action {			p := Paper new . p setText: t . p addAuthor: m . p setName: n .  }		postcond return(1`#true)	trans t2		cond conference(1`c), member(1`m)		precond p(1`p)		guard { self cannotPutPaper .  }		postcond return(1`#false)').'testMP' -> (PNCompiledClass compileClass: 'class testMP is_a PNobject	place start(1`#e)	place end()	trans t		precond start(1`#e)		action {			Transcript cr . Transcript show: ''TestMP'' . Transcript cr . paper1 := Paper new . paper1 setName: ''Art1'' . paper1 setText: ''Test art1.'' . aMember := Member new . aMember as: #author name: ''Pepa Author'' . rMember := Member new . rMember as: #reviewer name: ''Franta Reviewer'' . rev := Review new . rev setAuthor: rMember . rev setText: ''V poradku'' . rev1 := Review new . rev1 setAuthor: rMember . rev1 setText: ''V poradku1'' . paper1 addAuthor: aMember . paper1 addAuthor: aMember . paper1 setReview: rev . paper1 setReview: rev1 . paper1 print . paper1 printAuthors . paper1 printReview . aMember addPaper: paper1 . aMember print . aMember printPapers .  }		postcond end(1`#e)').'AdminNet' -> (PNCompiledClass compileClass: 'class AdminNet is_a UserNetobject	place system()	place member()	place conference()	place start(1`#e)	trans test		precond start(1`#e)		action {			Transcript show: ''Admin net'' . Transcript cr .  }	sync conferences: c 		cond system(1`s)		guard { s conferences: c .  }method createConf: n 	place n()	place return()	trans t		cond system(1`s)		precond n(1`n)		action {			conf := Conference new . conf setName: n . s addConference: conf .  }		postcond return(1`conf)method for: m 	place m()	place return()	trans t		precond m(1`member)		action {			self setMember: member .  }		postcond return(1`#done)method setConference: c 	place c()	place return()	trans t		precond c(1`c)		postcond conference(1`c), return(1`c)method createConf: n desc: d 	place n()	place d()	place return()	trans t		cond system(1`s)		precond n(1`n), d(1`d)		action {			conf := Conference new . conf setName: n . conf setDescription: d . s addConference: conf .  }		postcond return(1`conf)method setMember: m 	place m()	place return()	trans t		precond m(1`m)		postcond member(1`m), return(1`m)method for: m in: c 	place m()	place c()	place return()	trans t		precond m(1`member), c(1`conf)		action {			self setMember: member . self setConference: conf .  }		postcond return(1`#done)method setSystem: s 	place s()	place return()	trans t		precond s(1`s)		postcond system(1`s), return(1`s)').#testLogin -> (PNCompiledClass compileClass: 'class testLogin is_a PNobject	place start(1`#e)	place state()	place uNet()	place ks()	trans t		precond start(1`#e)		action {			sys := SystemNet new . sys initMe . Transcript show: ''System test'' . Transcript cr .  }		postcond state(1`#login), ks(1`sys)	trans login		cond ks(1`sys)		precond state(1`#login)		guard { sys login: ''admin'' user: u .  }		action {			Transcript show: ''Login ok'' . Transcript cr . net := sys verify: u .  }		postcond state(1`#afterLogin), uNet(1`net)	trans test		cond ks(1`sys)		precond state(1`#afterLogin), uNet(1`net)		guard { net role: r .  }		action {			Transcript show: (r printString ) . Transcript cr .  }		postcond state(1`#afterLogout)	trans logout		cond ks(1`sys)		precond state(1`#afterTest), uNet(1`net)		guard { sys logout: net .  }		action {			Transcript show: ''Logout ok'' . Transcript cr .  }		postcond state(1`#afterLogout)').'testGen' -> (PNCompiledClass compileClass: 'class testGen is_a PNobject	place start(1`#e)	place state()	trans t		precond start(1`#e)		action {			g := Rev1 new .  }		postcond state(1`#done)').}; yourself)