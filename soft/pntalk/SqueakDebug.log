Error: Error!18 May 2013 9:20:25 amVM: Win32 - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir E:\VUT\DP\soft\pntalkTrusted Dir E:\VUT\DP\soft\pntalk\MatronUntrusted Dir C:\Users\Matron\Documents\My SqueakPNParser(Object)>>error:	Receiver: a PNParser	Arguments and temporary variables: 		aString: 	'Error!'	Receiver's instance variables: 		source: 	a ReadStream a Text for 'class testGetConf is_a PNobject	place start...etc...		mark: 	291		hereChar: 	Character space		aheadChar: 	$p		token: 	'c'		tokenType: 	#word		currentComment: 	nil		buffer: 	a WriteStream 'c'		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	#{		hereType: 	#leftBrace		hereMark: 	286		hereEnd: 	286		prevMark: 	284		prevEnd: 	284		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	0		tempsMark: 	265		doitFlag: 	false		properties: 	a MethodProperties		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerTPNParser(Object)>>error	Receiver: a PNParser	Arguments and temporary variables: 	Receiver's instance variables: 		source: 	a ReadStream a Text for 'class testGetConf is_a PNobject	place start...etc...		mark: 	291		hereChar: 	Character space		aheadChar: 	$p		token: 	'c'		tokenType: 	#word		currentComment: 	nil		buffer: 	a WriteStream 'c'		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	#{		hereType: 	#leftBrace		hereMark: 	286		hereEnd: 	286		prevMark: 	284		prevEnd: 	284		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	0		tempsMark: 	265		doitFlag: 	false		properties: 	a MethodProperties		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerTPNParser>>compileElement	Receiver: a PNParser	Arguments and temporary variables: 		mainClass: 	nil	Receiver's instance variables: 		source: 	a ReadStream a Text for 'class testGetConf is_a PNobject	place start...etc...		mark: 	291		hereChar: 	Character space		aheadChar: 	$p		token: 	'c'		tokenType: 	#word		currentComment: 	nil		buffer: 	a WriteStream 'c'		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	#{		hereType: 	#leftBrace		hereMark: 	286		hereEnd: 	286		prevMark: 	284		prevEnd: 	284		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	0		tempsMark: 	265		doitFlag: 	false		properties: 	a MethodProperties		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerTPNParser>>compile:	Receiver: a PNParser	Arguments and temporary variables: 		aSource: 	a Text for 'class testGetConf is_a PNobject	place start(1`#e)	plac...etc...		res: 	a PNCompiledClass	Receiver's instance variables: 		source: 	a ReadStream a Text for 'class testGetConf is_a PNobject	place start...etc...		mark: 	291		hereChar: 	Character space		aheadChar: 	$p		token: 	'c'		tokenType: 	#word		currentComment: 	nil		buffer: 	a WriteStream 'c'		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	#{		hereType: 	#leftBrace		hereMark: 	286		hereEnd: 	286		prevMark: 	284		prevEnd: 	284		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	0		tempsMark: 	265		doitFlag: 	false		properties: 	a MethodProperties		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerT--- The full stack ---PNParser(Object)>>error:PNParser(Object)>>errorPNParser>>compileElementPNParser>>compile: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -PNCompiledClass>>compile:PluggableTextMorph>>acceptTextInModelPluggableTextMorph>>acceptTextMorphForEditView>>acceptContentsTextMorphEditor>>accept[] in TextMorphEditor(ParagraphEditor)>>save: {[self accept]}TextMorphEditor(Controller)>>terminateAndInitializeAround:TextMorphEditor(ParagraphEditor)>>save:TextMorphEditor(ParagraphEditor)>>dispatchOnCharacter:with:TextMorphEditor>>dispatchOnCharacter:with:TextMorphEditor(ParagraphEditor)>>readKeyboard...etc...