Error: Error!19 May 2013 4:52:34 amVM: Win32 - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir E:\VUT\DP\soft\pntalkTrusted Dir E:\VUT\DP\soft\pntalk\MatronUntrusted Dir C:\Users\Matron\Documents\My SqueakPNParser(Object)>>error:	Receiver: a PNParser	Arguments and temporary variables: 		aString: 	'Error!'	Receiver's instance variables: 		source: 	nil		mark: 	nil		hereChar: 	nil		aheadChar: 	nil		token: 	nil		tokenType: 	nil		currentComment: 	nil		buffer: 	a WriteStream ''		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	nil		hereType: 	nil		hereMark: 	nil		hereEnd: 	nil		prevMark: 	nil		prevEnd: 	nil		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	nil		tempsMark: 	nil		doitFlag: 	nil		properties: 	nil		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerTPNParser(Object)>>error	Receiver: a PNParser	Arguments and temporary variables: 	Receiver's instance variables: 		source: 	nil		mark: 	nil		hereChar: 	nil		aheadChar: 	nil		token: 	nil		tokenType: 	nil		currentComment: 	nil		buffer: 	a WriteStream ''		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	nil		hereType: 	nil		hereMark: 	nil		hereEnd: 	nil		prevMark: 	nil		prevEnd: 	nil		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	nil		tempsMark: 	nil		doitFlag: 	nil		properties: 	nil		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerTPNParser>>compileElement	Receiver: a PNParser	Arguments and temporary variables: 		mainClass: 	nil	Receiver's instance variables: 		source: 	nil		mark: 	nil		hereChar: 	nil		aheadChar: 	nil		token: 	nil		tokenType: 	nil		currentComment: 	nil		buffer: 	a WriteStream ''		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	nil		hereType: 	nil		hereMark: 	nil		hereEnd: 	nil		prevMark: 	nil		prevEnd: 	nil		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	nil		tempsMark: 	nil		doitFlag: 	nil		properties: 	nil		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerTPNParser>>compile:	Receiver: a PNParser	Arguments and temporary variables: 		aSource: 	a Text for 'class Member is_a PNobject	place name(1`#nil)	place ro...etc...		res: 	a PNCompiledClass	Receiver's instance variables: 		source: 	nil		mark: 	nil		hereChar: 	nil		aheadChar: 	nil		token: 	nil		tokenType: 	nil		currentComment: 	nil		buffer: 	a WriteStream ''		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...		here: 	nil		hereType: 	nil		hereMark: 	nil		hereEnd: 	nil		prevMark: 	nil		prevEnd: 	nil		encoder: 	nil		requestor: 	nil		parseNode: 	nil		failBlock: 	nil		requestorOffset: 	nil		tempsMark: 	nil		doitFlag: 	nil		properties: 	nil		category: 	nil		actionsCollection: 	an OrderedCollection()		lexer: 	a Lex		alex: 	a LexerT--- The full stack ---PNParser(Object)>>error:PNParser(Object)>>errorPNParser>>compileElementPNParser>>compile: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -PNCompiledClass>>compile:PluggableTextMorph>>acceptTextInModelPluggableTextMorph>>acceptTextMorphForEditView>>acceptContentsTextMorphEditor>>accept[] in TextMorphEditor(ParagraphEditor)>>save: {[self accept]}TextMorphEditor(Controller)>>terminateAndInitializeAround:TextMorphEditor(ParagraphEditor)>>save:TextMorphEditor(ParagraphEditor)>>dispatchOnCharacter:with:TextMorphEditor>>dispatchOnCharacter:with:TextMorphEditor(ParagraphEditor)>>readKeyboardTextMorphEditor>>readKeyboard[] in TextMorphForEditView(TextMorph)>>keyStroke: {[editor readKeyboard]}TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:...etc...