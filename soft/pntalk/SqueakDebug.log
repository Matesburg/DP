Error: system class variable name should be capitalized; proceed to include anyway.18 May 2013 11:53:27 amVM: Win32 - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir E:\VUT\DP\soft\pntalkTrusted Dir E:\VUT\DP\soft\pntalk\MatronUntrusted Dir C:\Users\Matron\Documents\My SqueakWAConferenceSystemDP class(Object)>>error:	Receiver: WAConferenceSystemDP	Arguments and temporary variables: 		aString: 	'system class variable name should be capitalized; proceed to include ...etc...	Receiver's instance variables: 		superclass: 	WAComponent		methodDict: 	a MethodDictionary(#canBeRoot->a CompiledMethod (395) #initialize->...etc...		format: 	140		instanceVariables: 	#('name' 'role' 'failMessage' 'uNet')		organization: 	('as yet unclassified' canBeRoot initialize login logout: name na...etc...		subclasses: 	nil		name: 	#WAConferenceSystemDP		classPool: 	a Dictionary(#system->a PNtalkObjectProxy )		sharedPools: 	nil		environment: 	a SystemDictionary(lots of globals)		category: 	#'PNtalk-DP-xcaham02'		traitComposition: 	nil		localSelectors: 	nil[] in WAConferenceSystemDP class(Class)>>declare: {[:var | var first canBeGlobalVarInitial   ifFalse: [self error: var , ' clas...]}	Arguments and temporary variables: 		varString: 	'system'		newVars: 	#(#system)		conflicts: 	nil		x: 	'system'		var: 	#systemArray(SequenceableCollection)>>do:	Receiver: #(#system)	Arguments and temporary variables: 		aBlock: 	[] in WAConferenceSystemDP class(Class)>>declare: {[:var | var first ca...etc...		index: 	1		indexLimiT: 	1	Receiver's instance variables: #(#system)WAConferenceSystemDP class(Class)>>declare:	Receiver: WAConferenceSystemDP	Arguments and temporary variables: 		varString: 	'system'		newVars: 	#(#system)		conflicts: 	nil		x: 	'system'		var: 	#system	Receiver's instance variables: 		superclass: 	WAComponent		methodDict: 	a MethodDictionary(#canBeRoot->a CompiledMethod (395) #initialize->...etc...		format: 	140		instanceVariables: 	#('name' 'role' 'failMessage' 'uNet')		organization: 	('as yet unclassified' canBeRoot initialize login logout: name na...etc...		subclasses: 	nil		name: 	#WAConferenceSystemDP		classPool: 	a Dictionary(#system->a PNtalkObjectProxy )		sharedPools: 	nil		environment: 	a SystemDictionary(lots of globals)		category: 	#'PNtalk-DP-xcaham02'		traitComposition: 	nil		localSelectors: 	nil--- The full stack ---WAConferenceSystemDP class(Object)>>error:[] in WAConferenceSystemDP class(Class)>>declare: {[:var | var first canBeGlobalVarInitial   ifFalse: [self error: var , ' clas...]}Array(SequenceableCollection)>>do:WAConferenceSystemDP class(Class)>>declare: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe: {[unsafe   ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass...]}BlockContext>>ensure:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:WAComponent class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:UndefinedObject>>DoItCompiler>>evaluate:in:to:notifying:ifFail:logged:Compiler class>>evaluate:for:notifying:logged:Compiler class>>evaluate:for:logged:Compiler class>>evaluate:logged:[] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing: {[val := (self peekFor: $!)     ifTrue: [(Compiler evaluate: self nextChunk l...]}BlockContext>>on:do:[] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing: {[:bar |  [self atEnd]   whileFalse: [bar value: self position.    self skipS...]}[] in ProgressInitiationException>>defaultMorphicAction {[result := workBlock value: progress]}BlockContext>>ensure:ProgressInitiationException>>defaultMorphicActionProgressInitiationException>>defaultActionUndefinedObject>>handleSignal:MethodContext(ContextPart)>>handleSignal:ProgressInitiationException(Exception)>>signalProgressInitiationException>>display:at:from:to:during:...etc...