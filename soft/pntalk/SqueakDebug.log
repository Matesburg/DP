Error: UndefinedObject cannot be changed17 May 2013 8:22:04 pmVM: Win32 - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir E:\VUT\DP\soft\pntalkTrusted Dir E:\VUT\DP\soft\pntalk\MatronUntrusted Dir C:\Users\Matron\Documents\My SqueakClassBuilder(Object)>>error:	Receiver: a ClassBuilder	Arguments and temporary variables: 		aString: 	'UndefinedObject cannot be changed'	Receiver's instance variables: 		environ: 	a SystemDictionary(lots of globals)		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nil[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe: {[unsafe   ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass...]}	Arguments and temporary variables: 		className: 	#UndefinedObject		env: 	a SystemDictionary(lots of globals)		newSuper: 	Object		type: 	#normal		instVarString: 	' name'		classVarString: 	''		poolString: 	''		category: 	#'Kernel-Objects'		unsafe: 	false		oldClass: 	UndefinedObject		newClass: 	nil		organization: 	nil		instVars: 	#('name')		classVars: 	#()		force: 	nil		needNew: 	true		oldCategory: 	nil		copyOfOldClass: 	UndefinedObject		newCategory: 	nil		x: 	nil		ex: 	nilBlockContext>>ensure:	Receiver: [] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariable...etc...	Arguments and temporary variables: 		aBlock: 	[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...		returnValue: 	nil		b: 	nil	Receiver's instance variables: 		sender: 	BlockContext>>ensure:		pc: 	385		stackp: 	0		nargs: 	0		startpc: 	304		home: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:cl...etc...ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:	Receiver: a ClassBuilder	Arguments and temporary variables: 		className: 	#UndefinedObject		env: 	a SystemDictionary(lots of globals)		newSuper: 	Object		type: 	#normal		instVarString: 	' name'		classVarString: 	''		poolString: 	''		category: 	#'Kernel-Objects'		unsafe: 	false		oldClass: 	UndefinedObject		newClass: 	nil		organization: 	nil		instVars: 	#('name')		classVars: 	#()		force: 	nil		needNew: 	true		oldCategory: 	nil		copyOfOldClass: 	UndefinedObject		newCategory: 	nil		x: 	nil		ex: 	nil	Receiver's instance variables: 		environ: 	a SystemDictionary(lots of globals)		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nil--- The full stack ---ClassBuilder(Object)>>error:[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe: {[unsafe   ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass...]}BlockContext>>ensure:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:UndefinedObject class(Class)>>addInstVarName:Parser>>declareInstVar:[] in Parser>>correctVariable:interval: {[self declareInstVar: proposedVariable]}Parser>>correctVariable:interval:[] in Parser>>variable {[self   correctVariable: varName   interval: (varStart to: varEnd)]}[] in Encoder>>encodeVariable:sourceRange:ifUnknown: {[(self    lookupInPools: name    ifFound: [:assoc | varNode := self global: ...]}Dictionary>>at:ifAbsent:Encoder>>encodeVariable:sourceRange:ifUnknown:Parser>>variableParser>>primaryExpressionParser>>expressionParser>>statements:innerBlock:Parser>>method:context:encoder:[] in Parser>>parse:class:noPattern:context:notifying:ifFail: {[methNode := self     method: noPattern     context: ctxt     encoder: (Enco...]}BlockContext>>on:do:Parser>>parse:class:noPattern:context:notifying:ifFail:Parser>>parse:class:category:noPattern:context:notifying:ifFail:Compiler>>translate:noPattern:ifFail:Compiler>>evaluate:in:to:notifying:ifFail:logged:Compiler class>>evaluate:for:notifying:logged:...etc...