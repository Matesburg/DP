MessageNotUnderstood: UndefinedObject>>mimeTypes19 May 2013 5:03:41 pmVM: Win32 - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir E:\VUT\DP\soft\pntalkTrusted Dir E:\VUT\DP\soft\pntalk\MatronUntrusted Dir C:\Users\Matron\Documents\My SqueakUndefinedObject(Object)>>doesNotUnderstand: #mimeTypes	Receiver: nil	Arguments and temporary variables: 		aMessage: 	mimeTypes	Receiver's instance variables: nilExternalDropHandler class>>lookupExternalDropHandler:	Receiver: ExternalDropHandler	Arguments and temporary variables: 		stream: 	nil		types: 	nil		extension: 	nil		serviceHandler: 	nil		handler: 	nil	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary(#extension->a CompiledMethod (3996) #handle:in:d...etc...		format: 	136		instanceVariables: 	#('action' 'type' 'extension')		organization: 	('accessing' extension handle:in:dropEvent: type)('initialize' t...etc...		subclasses: 	nil		name: 	#ExternalDropHandler		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...		sharedPools: 	nil		environment: 	a SystemDictionary(lots of globals)		category: 	#'System-Support'		traitComposition: 	nil		localSelectors: 	nilPasteUpMorph>>dropFiles:	Receiver: a PasteUpMorph(1622) [world]	Arguments and temporary variables: 		anEvent: 	[0@0 dropFilesEvent]		numFiles: 	1		stream: 	nil		handler: 	nil		i: 	1	Receiver's instance variables: 		bounds: 	0@0 corner: 1680@1028		owner: 	nil		submorphs: 	an Array(a PreDebugWindow(3179) a SystemWindow(3846) a SystemWindow(...etc...		fullBounds: 	nil		color: 	(Color r: 0.97 g: 0.98 b: 1.0)		extension: 	a MorphExtension (2543) [eventHandler = an EventHandler]  [other:  (...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)		presenter: 	a Presenter (1246)		model: 	a MorphicModel(3376)		cursor: 	1		padding: 	3		backgroundMorph: 	nil		turtleTrailsForm: 	nil		turtlePen: 	nil		lastTurtlePositions: 	nil		isPartsBin: 	nil		autoLineLayout: 	false		indicateCursor: 	nil		resizeToFit: 	nil		wantsMouseOverHalos: 	nil		worldState: 	a WorldState		griddingOn: 	nilPasteUpMorph(Morph)>>handleDropFiles:	Receiver: a PasteUpMorph(1622) [world]	Arguments and temporary variables: 		anEvent: 	[0@0 dropFilesEvent]	Receiver's instance variables: 		bounds: 	0@0 corner: 1680@1028		owner: 	nil		submorphs: 	an Array(a PreDebugWindow(3179) a SystemWindow(3846) a SystemWindow(...etc...		fullBounds: 	nil		color: 	(Color r: 0.97 g: 0.98 b: 1.0)		extension: 	a MorphExtension (2543) [eventHandler = an EventHandler]  [other:  (...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)		presenter: 	a Presenter (1246)		model: 	a MorphicModel(3376)		cursor: 	1		padding: 	3		backgroundMorph: 	nil		turtleTrailsForm: 	nil		turtlePen: 	nil		lastTurtlePositions: 	nil		isPartsBin: 	nil		autoLineLayout: 	false		indicateCursor: 	nil		resizeToFit: 	nil		wantsMouseOverHalos: 	nil		worldState: 	a WorldState		griddingOn: 	nil--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #mimeTypesExternalDropHandler class>>lookupExternalDropHandler:PasteUpMorph>>dropFiles:PasteUpMorph(Morph)>>handleDropFiles: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -DropFilesEvent>>sentTo:PasteUpMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:PasteUpMorph(Morph)>>processEvent:using:PasteUpMorph>>processEvent:using:PasteUpMorph(Morph)>>processEvent:HandMorph>>sendEvent:focus:clear:HandMorph>>sendEvent:focus:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor: {[:h |  ActiveHand := h.  h processEvents.  capturingGesture := capturingGest...]}Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in Project class>>spawnNewProcess {[[World doOneCycle.  Processor yield.  false] whileFalse.  nil]}[] in BlockContext>>newProcess {[self value.  Processor terminateActive]}